"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEYS = [];
const pack_1 = require("../pack");
function globalJsdom(html, options = {}) {
    if (exports.global.navigator &&
        exports.global.navigator.userAgent &&
        exports.global.navigator.userAgent.indexOf('Node.js') > -1 &&
        exports.global.document &&
        typeof exports.global.document.destroy === 'function') {
        return {
            jsdom: exports.global.$jsdom,
            window: exports.global.window,
            document: exports.global.document,
            cleanup: exports.global.document.destroy,
            global: exports.global,
            XMLHttpRequest: exports.global.window.XMLHttpRequest,
        };
    }
    let jsdom;
    if (options.JSDOM) {
        const JSDOM = options.JSDOM;
        delete options.JSDOM;
        delete options.createJSDOM;
        jsdom = new JSDOM(html, options);
    }
    else if (options.createJSDOM) {
        const create = options.createJSDOM;
        delete options.JSDOM;
        delete options.createJSDOM;
        if (typeof create == 'function') {
            jsdom = create(html, options);
        }
        else {
            jsdom = create;
        }
    }
    else {
        jsdom = pack_1.createJSDOM(html, options);
    }
    const window = jsdom.window;
    const document = window.document;
    if (exports.KEYS.length === 0) {
        exports.KEYS.push(...Object.getOwnPropertyNames(window).filter(k => !k.startsWith('_')).filter(k => !exports.global[k]));
        exports.KEYS.push('$jsdom');
    }
    exports.KEYS.forEach(function (key) {
        exports.global[key] = window[key];
    });
    exports.global.document = document;
    exports.global.window = window;
    window.console = exports.global.console;
    document.destroy = destroy;
    exports.global.$jsdom = jsdom;
    function destroy() {
        cleanup(exports.global);
    }
    return {
        jsdom,
        window,
        document,
        cleanup: destroy,
        global: exports.global,
        XMLHttpRequest: window.XMLHttpRequest,
    };
}
exports.globalJsdom = globalJsdom;
function cleanup(global) {
    exports.KEYS.forEach(function (key) { delete global[key]; });
}
exports.cleanup = cleanup;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVlhLFFBQUEsSUFBSSxHQUFhLEVBQUUsQ0FBQztBQUdqQyxrQ0FBMEU7QUEyQzFFLFNBQWdCLFdBQVcsQ0FBSSxJQUFLLEVBQUUsVUFBdUQsRUFBRTtJQUc5RixJQUFJLGNBQU0sQ0FBQyxTQUFTO1FBQ25CLGNBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUztRQUMxQixjQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELGNBQU0sQ0FBQyxRQUFRO1FBQ2YsT0FBTyxjQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQzlDO1FBQ0MsT0FBTztZQUNOLEtBQUssRUFBRSxjQUFNLENBQUMsTUFBTTtZQUNwQixNQUFNLEVBQUUsY0FBTSxDQUFDLE1BQU07WUFDckIsUUFBUSxFQUFFLGNBQU0sQ0FBQyxRQUFRO1lBQ3pCLE9BQU8sRUFBRSxjQUFNLENBQUMsUUFBUSxDQUFDLE9BQU87WUFDaEMsTUFBTSxFQUFOLGNBQU07WUFDTixjQUFjLEVBQUUsY0FBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjO1NBQzVDLENBQUM7S0FDRjtJQUVELElBQUksS0FBbUIsQ0FBQztJQUN4QixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQ2pCO1FBQ0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUM1QixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDckIsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBRzNCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDakM7U0FDSSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQzVCO1FBQ0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUNuQyxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDckIsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBRTNCLElBQUksT0FBTyxNQUFNLElBQUksVUFBVSxFQUMvQjtZQUVDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzlCO2FBRUQ7WUFFQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1NBQ2Y7S0FDRDtTQUVEO1FBQ0MsS0FBSyxHQUFHLGtCQUFXLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO0lBRUQsTUFBTSxNQUFNLEdBQXFCLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDOUMsTUFBTSxRQUFRLEdBQW9CLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFFbEQsSUFBSSxZQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDckI7UUFDQyxZQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsY0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6RyxZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3BCO0lBRUQsWUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7UUFFekIsY0FBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILGNBQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLGNBQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBR3ZCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBTSxDQUFDLE9BQU8sQ0FBQztJQUVoQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUUzQixjQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUV0QixTQUFTLE9BQU87UUFFZixPQUFPLENBQUMsY0FBTSxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUVELE9BQU87UUFDTixLQUFLO1FBQ0wsTUFBTTtRQUNOLFFBQVE7UUFDUixPQUFPLEVBQUUsT0FBTztRQUNoQixNQUFNLEVBQU4sY0FBTTtRQUNOLGNBQWMsRUFBRSxNQUFNLENBQUMsY0FBYztLQUNyQyxDQUFDO0FBQ0gsQ0FBQztBQXpGRCxrQ0F5RkM7QUFFRCxTQUFnQixPQUFPLENBQUMsTUFBTTtJQUU3QixZQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUhELDBCQUdDO0FBZUQsa0JBQWUsT0FBbUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTgvMi83LzAwNy5cbiAqXG4gKiBqc2RvbS1nbG9iYWxcbiAqIGdsb2JhbC1qc2RvbVxuICovXG5cbi8qXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBLRVlTIGZyb20gJ2pzZG9tLWdsb2JhbC9rZXlzJztcbmV4cG9ydCB7IEtFWVMgfVxuKi9cbmV4cG9ydCBjb25zdCBLRVlTOiBzdHJpbmdbXSA9IFtdO1xuXG5pbXBvcnQgeyBDb25zdHJ1Y3Rvck9wdGlvbnMsIERPTVdpbmRvdyB9IGZyb20gJ2pzZG9tJztcbmltcG9ydCB7IElDb25zdHJ1Y3Rvck9wdGlvbnMsIElKU0RPTSwgY3JlYXRlSlNET00sIEpTRE9NIH0gZnJvbSAnLi4vcGFjayc7XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBHbG9iYWwgZXh0ZW5kcyBOb2RlSlMuR2xvYmFsXG57XG5cdG5hdmlnYXRvcjoge1xuXHRcdHVzZXJBZ2VudDogc3RyaW5nXG5cdH0sXG5cblx0ZG9jdW1lbnQ6IElHbG9iYWxEb2N1bWVudCxcblx0d2luZG93OiBJR2xvYmFsRE9NV2luZG93LFxuXG5cdCRqc2RvbTogSUdsb2JhbEpTRE9NLFxufVxuXG5leHBvcnQgdHlwZSBJR2xvYmFsRE9NV2luZG93ID0gRE9NV2luZG93ICYge1xuXHRYTUxIdHRwUmVxdWVzdD86IFhNTEh0dHBSZXF1ZXN0LFxufTtcblxuZXhwb3J0IHR5cGUgSUdsb2JhbERvY3VtZW50ID0gRG9jdW1lbnQgJiB7XG5cdGRlc3Ryb3k/KCksXG59O1xuXG5leHBvcnQgZGVjbGFyZSB2YXIgZ2xvYmFsOiBHbG9iYWw7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnNcbntcblx0LyoqXG5cdCAqIGpzZG9tIGNsYXNzIHRoYXQgY2FuIGNhbGwgd2l0aCBuZXcgSlNET01cblx0ICovXG5cdEpTRE9NOiB0eXBlb2YgSlNET00sXG5cblx0LyoqXG5cdCAqIGFsbG93IHVzZSBleGlzdHMganNkb20gb3IgY3JlYXRlIGZ1bmN0aW9uXG5cdCAqIEByZXR1cm5zIHtJSlNET019XG5cdCAqL1xuXHQvL2NyZWF0ZUpTRE9NKCk6IElKU0RPTSxcblx0Y3JlYXRlSlNET006IElKU0RPTSB8IHtcblx0XHQoLi4uYXJndik6IElKU0RPTVxuXHR9LFxufVxuXG5leHBvcnQgdHlwZSBJR2xvYmFsSlNET00gPSBJSlNET007XG5cbmV4cG9ydCBmdW5jdGlvbiBnbG9iYWxKc2RvbTxUPihodG1sPywgb3B0aW9uczogUGFydGlhbDxUICYgSUNvbnN0cnVjdG9yT3B0aW9ucyAmIElPcHRpb25zPiA9IHt9KTogZ2xvYmFsSnNkb20uSVJldHVyblxue1xuXHQvLyBJZGVtcG90ZW5jeVxuXHRpZiAoZ2xvYmFsLm5hdmlnYXRvciAmJlxuXHRcdGdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50ICYmXG5cdFx0Z2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTm9kZS5qcycpID4gLTEgJiZcblx0XHRnbG9iYWwuZG9jdW1lbnQgJiZcblx0XHR0eXBlb2YgZ2xvYmFsLmRvY3VtZW50LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpXG5cdHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0anNkb206IGdsb2JhbC4kanNkb20sXG5cdFx0XHR3aW5kb3c6IGdsb2JhbC53aW5kb3csXG5cdFx0XHRkb2N1bWVudDogZ2xvYmFsLmRvY3VtZW50LFxuXHRcdFx0Y2xlYW51cDogZ2xvYmFsLmRvY3VtZW50LmRlc3Ryb3ksXG5cdFx0XHRnbG9iYWwsXG5cdFx0XHRYTUxIdHRwUmVxdWVzdDogZ2xvYmFsLndpbmRvdy5YTUxIdHRwUmVxdWVzdCxcblx0XHR9O1xuXHR9XG5cblx0bGV0IGpzZG9tOiBJR2xvYmFsSlNET007XG5cdGlmIChvcHRpb25zLkpTRE9NKVxuXHR7XG5cdFx0Y29uc3QgSlNET00gPSBvcHRpb25zLkpTRE9NO1xuXHRcdGRlbGV0ZSBvcHRpb25zLkpTRE9NO1xuXHRcdGRlbGV0ZSBvcHRpb25zLmNyZWF0ZUpTRE9NO1xuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdGpzZG9tID0gbmV3IEpTRE9NKGh0bWwsIG9wdGlvbnMpO1xuXHR9XG5cdGVsc2UgaWYgKG9wdGlvbnMuY3JlYXRlSlNET00pXG5cdHtcblx0XHRjb25zdCBjcmVhdGUgPSBvcHRpb25zLmNyZWF0ZUpTRE9NO1xuXHRcdGRlbGV0ZSBvcHRpb25zLkpTRE9NO1xuXHRcdGRlbGV0ZSBvcHRpb25zLmNyZWF0ZUpTRE9NO1xuXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGUgPT0gJ2Z1bmN0aW9uJylcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRqc2RvbSA9IGNyZWF0ZShodG1sLCBvcHRpb25zKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGpzZG9tID0gY3JlYXRlO1xuXHRcdH1cblx0fVxuXHRlbHNlXG5cdHtcblx0XHRqc2RvbSA9IGNyZWF0ZUpTRE9NKGh0bWwsIG9wdGlvbnMpO1xuXHR9XG5cblx0Y29uc3Qgd2luZG93OiBJR2xvYmFsRE9NV2luZG93ID0ganNkb20ud2luZG93O1xuXHRjb25zdCBkb2N1bWVudDogSUdsb2JhbERvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cdGlmIChLRVlTLmxlbmd0aCA9PT0gMClcblx0e1xuXHRcdEtFWVMucHVzaCguLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpLmZpbHRlcihrID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkuZmlsdGVyKGsgPT4gIWdsb2JhbFtrXSkpO1xuXHRcdC8vIGdvaW5nIHRvIGFkZCBvdXIganNkb20gaW5zdGFuY2UsIHNlZSBiZWxvd1xuXHRcdEtFWVMucHVzaCgnJGpzZG9tJyk7XG5cdH1cblxuXHRLRVlTLmZvckVhY2goZnVuY3Rpb24gKGtleSlcblx0e1xuXHRcdGdsb2JhbFtrZXldID0gd2luZG93W2tleV1cblx0fSk7XG5cblx0Z2xvYmFsLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG5cdGdsb2JhbC53aW5kb3cgPSB3aW5kb3c7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHR3aW5kb3cuY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuXG5cdGRvY3VtZW50LmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdGdsb2JhbC4kanNkb20gPSBqc2RvbTtcblxuXHRmdW5jdGlvbiBkZXN0cm95KClcblx0e1xuXHRcdGNsZWFudXAoZ2xvYmFsKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0anNkb20sXG5cdFx0d2luZG93LFxuXHRcdGRvY3VtZW50LFxuXHRcdGNsZWFudXA6IGRlc3Ryb3ksXG5cdFx0Z2xvYmFsLFxuXHRcdFhNTEh0dHBSZXF1ZXN0OiB3aW5kb3cuWE1MSHR0cFJlcXVlc3QsXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbnVwKGdsb2JhbClcbntcblx0S0VZUy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgZGVsZXRlIGdsb2JhbFtrZXldIH0pO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIGdsb2JhbEpzZG9tXG57XG5cdGV4cG9ydCBpbnRlcmZhY2UgSVJldHVyblxuXHR7XG5cdFx0anNkb20/OiBJR2xvYmFsSlNET007XG5cdFx0d2luZG93OiBJR2xvYmFsRE9NV2luZG93O1xuXHRcdGRvY3VtZW50OiBJR2xvYmFsRG9jdW1lbnQ7XG5cdFx0Y2xlYW51cDogKCkgPT4gdm9pZDtcblx0XHRnbG9iYWw/OiBHbG9iYWwsXG5cdFx0WE1MSHR0cFJlcXVlc3Q/OiBYTUxIdHRwUmVxdWVzdCxcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vaW5kZXgnKTtcbiJdfQ==