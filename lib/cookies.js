"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const toughCookie = require("tough-cookie");
exports.toughCookie = toughCookie;
const request_jar_1 = require("./cookies/request-jar");
exports.CookieJar = request_jar_1.CookieJar;
exports.RequestJar = request_jar_1.RequestJar;
exports.wrapCookieJarForRequest = request_jar_1.wrapCookieJarForRequest;
const moment = require("moment");
exports.moment = moment;
class LazyCookie extends toughCookie.Cookie {
    constructor(prop = {}, ...argv) {
        if (!prop.expires || prop.expires === -1) {
            prop.expires = moment().add(1, 'year');
        }
        else if (typeof prop.expires == 'number') {
            prop.expires = moment().add(prop.expires, 's');
        }
        for (let key in prop) {
            if (moment.isMoment(prop[key])) {
                prop[key] = prop[key].toDate();
            }
        }
        super(prop);
    }
    static create(prop, ...argv) {
        return new this(prop, ...argv);
    }
}
exports.LazyCookie = LazyCookie;
class LazyCookieJar extends request_jar_1.CookieJar {
    constructor(store, options = {}, data = {}, url) {
        super(store, options);
        this.setData(data, url);
    }
    setData(data = {}, url) {
        url = (url || '').toString();
        for (let key in data) {
            if (data[key] === null || typeof data[key] != 'object') {
                this.setCookieSync(new LazyCookie({
                    key,
                    value: data[key],
                }), url);
            }
            else if (data[key] instanceof toughCookie.Cookie) {
                this.setCookieSync(data[key], url);
            }
            else if (data[key]) {
                this.setCookieSync(new LazyCookie(data[key]), url);
            }
        }
        return this;
    }
    setCookieSync(cookieOrString, currentUrl, options = {}, ...argv) {
        if (typeof cookieOrString == 'string') {
            cookieOrString = toughCookie.Cookie.parse(cookieOrString);
        }
        else if (!(cookieOrString instanceof toughCookie.Cookie)) {
            cookieOrString = new LazyCookie(cookieOrString);
        }
        if (!currentUrl) {
            if (cookieOrString instanceof toughCookie.Cookie) {
                currentUrl = `http://` + cookieOrString.canonicalizedDomain();
            }
        }
        else if (typeof currentUrl != 'string') {
            currentUrl = currentUrl.toString();
        }
        return super.setCookieSync(cookieOrString, currentUrl, options, ...argv);
    }
    static create(store, options = {}, data = {}, url) {
        return new this(store, options, data, url);
    }
    wrapForRequest() {
        return request_jar_1.wrapCookieJarForRequest(this);
    }
    static unwrapFromRequest(jar) {
        return jar._jar;
    }
    getAllCookies() {
        let cookies;
        this.store.getAllCookies(function (err, cookie) {
            cookies = cookie;
        });
        return cookies;
    }
}
exports.LazyCookieJar = LazyCookieJar;
const self = require("./cookies");
exports.default = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvb2tpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSw0Q0FBNEM7QUFFbkMsa0NBQVc7QUFFcEIsdURBQTBHO0FBQ2pHLG9CQURBLHVCQUFTLENBQ0E7QUFBRSxxQkFEQSx3QkFBVSxDQUNBO0FBQUUsa0NBREEscUNBQXVCLENBQ0E7QUFLdkQsaUNBQWlDO0FBRXhCLHdCQUFNO0FBRWYsTUFBYSxVQUFXLFNBQVEsV0FBVyxDQUFDLE1BQU07SUFFakQsWUFBWSxPQUF1QyxFQUFFLEVBQUUsR0FBRyxJQUFJO1FBRTdELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLEVBQ3hDO1lBQ0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZDO2FBQ0ksSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLElBQUksUUFBUSxFQUN4QztZQUNDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0M7UUFFRCxLQUFLLElBQUksR0FBRyxJQUFJLElBQUksRUFDcEI7WUFDQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzlCO2dCQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDL0I7U0FDRDtRQUVELEtBQUssQ0FBQyxJQUE2QixDQUFDLENBQUM7SUFHdEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBcUMsRUFBRSxHQUFHLElBQUk7UUFFM0QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxJ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QUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsTUFBTTtZQUU3QyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztDQUNEO0FBNUZELHNDQTRGQztBQStERCxrQ0FBa0M7QUFDbEMsa0JBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8yLzcvMDA3LlxuICovXG5cbmltcG9ydCAqIGFzIHRvdWdoQ29va2llIGZyb20gJ3RvdWdoLWNvb2tpZSc7XG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xuZXhwb3J0IHsgdG91Z2hDb29raWUgfVxuXG5pbXBvcnQgeyBDb29raWVKYXIsIFJlcXVlc3RKYXIsIHdyYXBDb29raWVKYXJGb3JSZXF1ZXN0LCBJUmVxdWVzdENvb2tpZUphciB9IGZyb20gJy4vY29va2llcy9yZXF1ZXN0LWphcic7XG5leHBvcnQgeyBDb29raWVKYXIsIFJlcXVlc3RKYXIsIHdyYXBDb29raWVKYXJGb3JSZXF1ZXN0LCBJUmVxdWVzdENvb2tpZUphciB9XG5cbmltcG9ydCB7IFVSTCB9IGZyb20gJy4vcGFjayc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgeyBtb21lbnQgfVxuXG5leHBvcnQgY2xhc3MgTGF6eUNvb2tpZSBleHRlbmRzIHRvdWdoQ29va2llLkNvb2tpZVxue1xuXHRjb25zdHJ1Y3Rvcihwcm9wOiBQYXJ0aWFsPExhenlDb29raWUuUHJvcGVydGllcz4gPSB7fSwgLi4uYXJndilcblx0e1xuXHRcdGlmICghcHJvcC5leHBpcmVzIHx8IHByb3AuZXhwaXJlcyA9PT0gLTEpXG5cdFx0e1xuXHRcdFx0cHJvcC5leHBpcmVzID0gbW9tZW50KCkuYWRkKDEsICd5ZWFyJyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHR5cGVvZiBwcm9wLmV4cGlyZXMgPT0gJ251bWJlcicpXG5cdFx0e1xuXHRcdFx0cHJvcC5leHBpcmVzID0gbW9tZW50KCkuYWRkKHByb3AuZXhwaXJlcywgJ3MnKTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBrZXkgaW4gcHJvcClcblx0XHR7XG5cdFx0XHRpZiAobW9tZW50LmlzTW9tZW50KHByb3Bba2V5XSkpXG5cdFx0XHR7XG5cdFx0XHRcdHByb3Bba2V5XSA9IHByb3Bba2V5XS50b0RhdGUoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRzdXBlcihwcm9wIGFzIHRvdWdoQ29va2llUHJvcGVydGllcyk7XG5cblx0XHQvL2NvbnNvbGUubG9nKHRoaXMpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZShwcm9wPzogUGFydGlhbDxMYXp5Q29va2llLlByb3BlcnRpZXM+LCAuLi5hcmd2KVxuXHR7XG5cdFx0cmV0dXJuIG5ldyB0aGlzKHByb3AsIC4uLmFyZ3YpXG5cdH1cbn1cblxuZXhwb3J0IHR5cGUgUmVxdWVzdENvb2tpZUphciA9IElSZXF1ZXN0Q29va2llSmFyPENvb2tpZUphciB8IExhenlDb29raWVKYXI+XG5cbmV4cG9ydCBjbGFzcyBMYXp5Q29va2llSmFyIGV4dGVuZHMgQ29va2llSmFyXG57XG5cdGVuYWJsZUxvb3NlTW9kZT86IGJvb2xlYW47XG5cdHJlamVjdFB1YmxpY1N1ZmZpeGVzPzogYm9vbGVhbjtcblx0cHVibGljIHN0b3JlPzogdG91Z2hDb29raWUuU3RvcmU7XG5cblx0Y29uc3RydWN0b3Ioc3RvcmU/LCBvcHRpb25zID0ge30sIGRhdGEgPSB7fSwgdXJsPzogc3RyaW5nIHwgVVJMKVxuXHR7XG5cdFx0c3VwZXIoc3RvcmUsIG9wdGlvbnMpO1xuXG5cdFx0dGhpcy5zZXREYXRhKGRhdGEsIHVybCk7XG5cdH1cblxuXHRzZXREYXRhKGRhdGEgPSB7fSwgdXJsPzogc3RyaW5nIHwgVVJMKVxuXHR7XG5cdFx0dXJsID0gKHVybCB8fCAnJykudG9TdHJpbmcoKTtcblxuXHRcdGZvciAobGV0IGtleSBpbiBkYXRhKVxuXHRcdHtcblx0XHRcdGlmIChkYXRhW2tleV0gPT09IG51bGwgfHwgdHlwZW9mIGRhdGFba2V5XSAhPSAnb2JqZWN0Jylcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5zZXRDb29raWVTeW5jKG5ldyBMYXp5Q29va2llKHtcblx0XHRcdFx0XHRrZXksXG5cdFx0XHRcdFx0dmFsdWU6IGRhdGFba2V5XSxcblx0XHRcdFx0fSksIHVybCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChkYXRhW2tleV0gaW5zdGFuY2VvZiB0b3VnaENvb2tpZS5Db29raWUpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuc2V0Q29va2llU3luYyhkYXRhW2tleV0sIHVybCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChkYXRhW2tleV0pXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuc2V0Q29va2llU3luYyhuZXcgTGF6eUNvb2tpZShkYXRhW2tleV0pLCB1cmwpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0c2V0Q29va2llU3luYyhjb29raWVPclN0cmluZzogTGF6eUNvb2tpZS5Qcm9wZXJ0aWVzIHwgdG91Z2hDb29raWUuQ29va2llIHwgc3RyaW5nLCBjdXJyZW50VXJsPzogc3RyaW5nIHwgVVJMLCBvcHRpb25zOiB0b3VnaENvb2tpZS5Db29raWVKYXIuU2V0Q29va2llT3B0aW9ucyA9IHt9LCAuLi5hcmd2KVxuXHR7XG5cdFx0aWYgKHR5cGVvZiBjb29raWVPclN0cmluZyA9PSAnc3RyaW5nJylcblx0XHR7XG5cdFx0XHRjb29raWVPclN0cmluZyA9IHRvdWdoQ29va2llLkNvb2tpZS5wYXJzZShjb29raWVPclN0cmluZyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKCEoY29va2llT3JTdHJpbmcgaW5zdGFuY2VvZiB0b3VnaENvb2tpZS5Db29raWUpKVxuXHRcdHtcblx0XHRcdGNvb2tpZU9yU3RyaW5nID0gbmV3IExhenlDb29raWUoY29va2llT3JTdHJpbmcpO1xuXHRcdH1cblxuXHRcdGlmICghY3VycmVudFVybClcblx0XHR7XG5cdFx0XHRpZiAoY29va2llT3JTdHJpbmcgaW5zdGFuY2VvZiB0b3VnaENvb2tpZS5Db29raWUpXG5cdFx0XHR7XG5cdFx0XHRcdGN1cnJlbnRVcmwgPSBgaHR0cDovL2AgKyBjb29raWVPclN0cmluZy5jYW5vbmljYWxpemVkRG9tYWluKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHR5cGVvZiBjdXJyZW50VXJsICE9ICdzdHJpbmcnKVxuXHRcdHtcblx0XHRcdGN1cnJlbnRVcmwgPSBjdXJyZW50VXJsLnRvU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBzdXBlci5zZXRDb29raWVTeW5jKGNvb2tpZU9yU3RyaW5nIGFzIHRvdWdoQ29va2llLkNvb2tpZSwgY3VycmVudFVybCBhcyBzdHJpbmcsIG9wdGlvbnMsIC4uLmFyZ3YpXG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlKHN0b3JlPywgb3B0aW9ucyA9IHt9LCBkYXRhID0ge30sIHVybD86IHN0cmluZyB8IFVSTClcblx0e1xuXHRcdHJldHVybiBuZXcgdGhpcyhzdG9yZSwgb3B0aW9ucywgZGF0YSwgdXJsKTtcblx0fVxuXG5cdHdyYXBGb3JSZXF1ZXN0KClcblx0e1xuXHRcdHJldHVybiB3cmFwQ29va2llSmFyRm9yUmVxdWVzdCh0aGlzKTtcblx0fVxuXG5cdHN0YXRpYyB1bndyYXBGcm9tUmVxdWVzdChqYXI6IFJlcXVlc3RDb29raWVKYXIpXG5cdHtcblx0XHRyZXR1cm4gamFyLl9qYXI7XG5cdH1cblxuXHRnZXRBbGxDb29raWVzKClcblx0e1xuXHRcdGxldCBjb29raWVzOiB0b3VnaENvb2tpZS5Db29raWVbXTtcblxuXHRcdHRoaXMuc3RvcmUuZ2V0QWxsQ29va2llcyhmdW5jdGlvbiAoZXJyLCBjb29raWUpXG5cdFx0e1xuXHRcdFx0Y29va2llcyA9IGNvb2tpZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBjb29raWVzO1xuXHR9XG59XG5cbi8qXG5jb25zb2xlLmxvZyhMYXp5Q29va2llSmFyLmNyZWF0ZSgpLnNldENvb2tpZVN5bmMoe1xuXHRrZXk6ICdvdmVyMTgnLFxuXHQvL3ZhbHVlOiAneWVzJyxcbn0sICdodHRwOi8vc3lvc2V0dS5jb20nKSk7XG5cbmNvbnNvbGUubG9nKExhenlDb29raWVKYXIuY3JlYXRlKCkuc2V0Q29va2llU3luYygnb3ZlcjE4PXllcycsICdodHRwOi8vc3lvc2V0dS5jb20nKSk7XG5cbmxldCBqYXIgPSBMYXp5Q29va2llSmFyLmNyZWF0ZSgpO1xuXG5qYXIuc2V0Q29va2llU3luYygnb3ZlcjE4PXllcycsICdodHRwOi8vc3lvc2V0dS5jb20nKTtcbmNvbnNvbGUuZGlyKGphci5zdG9yZS5nZXRBbGxDb29raWVzKGZ1bmN0aW9uIChlcnIsIGNvb2tpZSlcbntcblx0Y29uc29sZS5kaXIoY29va2llKTtcblxuXHRjb25zb2xlLmRpcihuZXcgTGF6eUNvb2tpZShjb29raWVbMF0pKTtcbn0pKTtcbmNvbnNvbGUubG9nKDQ0NDQ0NCk7XG4qL1xuXG5leHBvcnQgbmFtZXNwYWNlIExhenlDb29raWVcbntcblx0ZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0aWVzXG5cdHtcblx0XHRrZXk6IHN0cmluZztcblx0XHR2YWx1ZT86IHN0cmluZztcblx0XHRleHBpcmVzPzogRGF0ZSB8IG1vbWVudC5Nb21lbnQgfCBudW1iZXI7XG5cdFx0bWF4QWdlPzogbnVtYmVyIHwgJ0luZmluaXR5JyB8ICctSW5maW5pdHknO1xuXHRcdGRvbWFpbj86IHN0cmluZztcblx0XHRwYXRoPzogc3RyaW5nO1xuXHRcdHNlY3VyZT86IGJvb2xlYW47XG5cdFx0aHR0cE9ubHk/OiBib29sZWFuO1xuXHRcdGV4dGVuc2lvbnM/OiBzdHJpbmdbXTtcblx0XHRjcmVhdGlvbj86IERhdGUgfCBtb21lbnQuTW9tZW50O1xuXHRcdGNyZWF0aW9uSW5kZXg/OiBudW1iZXI7XG5cblx0XHRob3N0T25seT86IGJvb2xlYW47XG5cdFx0cGF0aElzRGVmYXVsdD86IGJvb2xlYW47XG5cdFx0bGFzdEFjY2Vzc2VkPzogRGF0ZTtcblx0fVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIHRvdWdoQ29va2llUHJvcGVydGllc1xue1xuXHRrZXk/OiBzdHJpbmc7XG5cdHZhbHVlPzogc3RyaW5nO1xuXHRleHBpcmVzPzogRGF0ZTtcblx0bWF4QWdlPzogbnVtYmVyIHwgJ0luZmluaXR5JyB8ICctSW5maW5pdHknO1xuXHRkb21haW4/OiBzdHJpbmc7XG5cdHBhdGg/OiBzdHJpbmc7XG5cdHNlY3VyZT86IGJvb2xlYW47XG5cdGh0dHBPbmx5PzogYm9vbGVhbjtcblx0ZXh0ZW5zaW9ucz86IHN0cmluZ1tdO1xuXHRjcmVhdGlvbj86IERhdGU7XG5cdGNyZWF0aW9uSW5kZXg/OiBudW1iZXI7XG5cblx0aG9zdE9ubHk/OiBib29sZWFuO1xuXHRwYXRoSXNEZWZhdWx0PzogYm9vbGVhbjtcblx0bGFzdEFjY2Vzc2VkPzogRGF0ZTtcbn1cblxuaW1wb3J0ICogYXMgc2VsZiBmcm9tICcuL2Nvb2tpZXMnO1xuZXhwb3J0IGRlZmF1bHQgc2VsZjtcbiJdfQ==